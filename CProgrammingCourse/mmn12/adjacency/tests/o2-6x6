The program is setup with a 6x6 adjacency matrix, enter its contents below:
Enter 1 or 0 for each coordinate:

| X || 0 || 1 || 2 || 3 || 4 || 5 |
| 0 || * || * || * || * || * || * |
| 1 || * || * || * || * || * || * |
| 2 || * || * || * || * || * || * |
| 3 || * || * || * || * || * || * |
| 4 || * || * || * || * || * || * |
| 5 || * || * || * || * || * || * |

(0,0) = (0,1) = (0,2) = (0,3) = (0,4) = (0,5) = (1,0) = (1,1) = Error: input can only be 1 or 0, enter the value again
(1,1) = Error: input is not a valid number, enter a 1 or 0 value again
(1,1) = Error: input is not a valid number, enter a 1 or 0 value again
(1,1) = (1,2) = (1,3) = (1,4) = (1,5) = (2,0) = (2,1) = (2,2) = (2,3) = (2,4) = (2,5) = (3,0) = (3,1) = (3,2) = (3,3) = (3,4) = (3,5) = (4,0) = (4,1) = (4,2) = (4,3) = (4,4) = (4,5) = (5,0) = (5,1) = (5,2) = (5,3) = (5,4) = (5,5) = 
The adjacency matrix was successfuly set up: 
| X || 0 || 1 || 2 || 3 || 4 || 5 |
| 0 || 0 || 0 || 0 || 0 || 0 || 0 |
| 1 || 0 || 0 || 1 || 0 || 0 || 0 |
| 2 || 0 || 0 || 0 || 0 || 0 || 0 |
| 3 || 0 || 1 || 0 || 0 || 1 || 1 |
| 4 || 0 || 0 || 0 || 0 || 0 || 0 |
| 5 || 1 || 0 || 0 || 0 || 0 || 0 |

Enter two values seperated by a sapce to check adjacenty (-1 -1 coordinate to terminate): 
Enter values (between 0 and 5): Checking for path from 3 to 0  -->  Found path
Enter values (between 0 and 5): Checking for path from 5 to 0  -->  Found path
Enter values (between 0 and 5): Checking for path from 1 to 2  -->  Found path
Enter values (between 0 and 5): Checking for path from 4 to 2  -->  Didn't find path
Enter values (between 0 and 5): Checking for path from 2 to 3  -->  Didn't find path
Enter values (between 0 and 5): Checking for path from 0 to 3  -->  Didn't find path
Enter values (between 0 and 5): 
Program terminated
